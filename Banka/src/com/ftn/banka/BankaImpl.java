
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.ftn.banka;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.UUID;
import java.util.logging.Logger;

import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.namespace.QName;
import javax.xml.ws.RequestWrapper;

import com.ftn.narodna_banka.NarodnaBanka;
import com.ftn.narodna_banka.RTGSFault;
import com.ftn.schema.mt103.Mt103.Banke;

import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;





import com.ftn.Frima.app.models.BankaModel;
import com.ftn.Frima.app.models.Baza;
import com.ftn.Frima.app.models.FrimaModel;
import com.ftn.schema.mt103.Mt103;
import com.ftn.schema.mt103.TBanka;
import com.ftn.schema.mt103.TPlacanje;
import com.ftn.schema.mt103.TUplata;
import com.ftn.schema.mt900.Mt900;
import com.ftn.schema.mt910.Mt910;

import requests.Requests;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2018-02-12T18:43:49.331+01:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "BankaService",
                      portName = "Banka",
                      targetNamespace = "http://www.ftn.com/banka",                
                      endpointInterface = "com.ftn.banka.Banka")
                      
public class BankaImpl implements Banka {

    private static final Logger LOG = Logger.getLogger(BankaImpl.class.getName());

    /* (non-Javadoc)
     * @see com.ftn.banka.Banka#rtgsBanka(com.ftn.schema.mt103.Mt103  mt103 ,)com.ftn.schema.mt910.Mt910  mt910 )*
     */
    public void rtgsBanka(com.ftn.schema.mt103.Mt103 mt103,com.ftn.schema.mt910.Mt910 mt910) { 
        Baza.init();
    	System.out.println("NarodnaBanka je poslala MT103: "+mt103.getIdPoruke() +" i MT910"+mt910.getIdPoruke());
        FrimaModel fimaPoverioc=Baza.getFirmaByRacun(mt103.getBanke().getBankaPoverioca().getBankAccountNumber());
        fimaPoverioc.getRacun().setTrenutnoStanje(new BigDecimal(fimaPoverioc.getRacun().getTrenutnoStanje().intValue()+ mt103.getUplata().getIznos().intValue()));
        System.out.println("Firma Stanje: "+fimaPoverioc.getRacun().getTrenutnoStanje()+" Rezervisna Sredstva:  "+fimaPoverioc.getRacun().getRezervisanaSredstva());

    }

    /* (non-Javadoc)
     * @see com.ftn.banka.Banka#slanjeNalogaZaPlacanje(com.ftn.schema.prenos.NalogZaPrenos  nalog )*
     */
    public boolean slanjeNalogaZaPlacanje(com.ftn.schema.prenos.NalogZaPrenos nalog){ 
        
    	System.out.println("Slanje naloga, id: " + nalog.getIdPoruke());
    	Baza.init();
    	

    	String racunDuznik=nalog.getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna();
    	String racunPoverilac=nalog.getPodaciOPrenosu().getPoverilacPrenos().getBrojRacuna();
    	
    	String swiftD = racunDuznik.substring(0,4);
    	String swiftP = racunPoverilac.substring(0,4);
    	BigDecimal iznos=nalog.getPodaciOPrenosu().getIznos();
    	
    	if(swiftD.equals(swiftP)){
    		System.out.println("Racuni su u istoj banci-Transfer je izvrsen!");
    		return true;
    	}else{
    		System.out.println("Racuni nisu u istoj banci!");
    		if(iznos.intValue()>=250000 || nalog.isHitno()){
    			System.out.println("RTGS!");
    			
    			
    			FrimaModel firmaDuznik=Baza.getFirmaByRacun(nalog.getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna());
    	    	BankaModel CB=Baza.getBankByRacun("8080-000000000000-00");
    	    	
    	    	
    	    	System.out.println("Banka rezervise sredstva sa Racuna duznika!");
    	    	System.out.println("Firma Stanje: "+firmaDuznik.getRacun().getTrenutnoStanje()+" Rezervisna Sredstva:  "+firmaDuznik.getRacun().getRezervisanaSredstva());
    	    	firmaDuznik.getRacun().setRezervisanaSredstva(new BigDecimal(firmaDuznik.getRacun().getRezervisanaSredstva().intValue()+ nalog.getPodaciOPrenosu().getIznos().intValue()));
    	    	firmaDuznik.getRacun().setTrenutnoStanje(new BigDecimal(firmaDuznik.getRacun().getTrenutnoStanje().intValue()- nalog.getPodaciOPrenosu().getIznos().intValue()));
    	    	System.out.println("Firma Novo Stanje: "+firmaDuznik.getRacun().getTrenutnoStanje()+" Rezervisna Sredstva:  "+firmaDuznik.getRacun().getRezervisanaSredstva());
    	    	
    	    	CB.getRacunBanke().setTrenutnoStanje(new BigDecimal(CB.getRacunBanke().getTrenutnoStanje().intValue()+ nalog.getPodaciOPrenosu().getIznos().intValue()));
    	    	System.out.println("CB Stanje: "+CB.getRacunBanke().getTrenutnoStanje());
    			
    			Mt103 mt103=new Mt103();
    			mt103.setIdPoruke(UUID.randomUUID().toString().replaceAll("-", ""));
    			Banke banke=new Banke();
    			TBanka duznik=new TBanka();
    			TBanka poverioc=new TBanka();
    			duznik.setBankAccountNumber(racunDuznik);
    			duznik.setSWIFT(swiftD);
    			poverioc.setBankAccountNumber(racunPoverilac);
    			poverioc.setSWIFT(swiftP);
    			
    			TUplata uplata=new TUplata();
    			uplata.setDuznikNalogodavac(nalog.getDuznikNalogodavac());
    			uplata.setSvrhaPlacanja(nalog.getSvrhaPlacanja());
    			uplata.setPrimalacPoverilac(nalog.getPrimalacPoverilac());
    			uplata.setDatumNaloga(nalog.getDatumNaloga());
    			uplata.setDatumValute(nalog.getPodaciOPrenosu().getDatumValute());

    			TPlacanje tduz=new TPlacanje();
    			tduz.setRacun(nalog.getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna());
    			tduz.setPozivNaBroj(nalog.getPodaciOPrenosu().getDuznikPrenos().getPozivNaBroj());
    			tduz.setModel(nalog.getPodaciOPrenosu().getDuznikPrenos().getModel());
    			
    			TPlacanje tpo=new TPlacanje();
    			tpo.setRacun(nalog.getPodaciOPrenosu().getPoverilacPrenos().getBrojRacuna());
    			tpo.setPozivNaBroj(nalog.getPodaciOPrenosu().getPoverilacPrenos().getPozivNaBroj());
    			tpo.setModel(nalog.getPodaciOPrenosu().getPoverilacPrenos().getModel());
    			uplata.setIznos(nalog.getPodaciOPrenosu().getIznos());
    			uplata.setSifraValute(nalog.getPodaciOPrenosu().getOznakaValute());
    			uplata.setPoverilacOdobrenje(tpo);
    			uplata.setDuznikZaduzenje(tduz);
    			
    			mt103.setUplata(uplata);
    			banke.setBankaDuznika(duznik);
    			banke.setBankaPoverioca(poverioc);
    			mt103.setBanke(banke);
    			
    			try {
    				URL wsdlLocation = new URL("http://localhost:8080/narodna_banka/services/NarodnaBanka?wsdl");
    				QName serviceName = new QName("http://www.ftn.com/narodna_banka", "NarodnaBankaService");
    	            QName portName = new QName("http://www.ftn.com/narodna_banka", "NarodnaBanka");
    	            
    	            javax.xml.ws.Service service = javax.xml.ws.Service.create(wsdlLocation, serviceName);
    				
    				NarodnaBanka narodnaBanka = service.getPort(portName, NarodnaBanka.class); 
    			
    				Mt900 mt900=narodnaBanka.mt103ReceiveCB(mt103);
    				System.out.println("Response from WS: " + mt900);
    				
    			} catch (MalformedURLException e) {
    				e.printStackTrace();
    			} catch (RTGSFault e) {
					System.out.println("GRESKA KOD SLANJA MT103!");
					e.printStackTrace();
				}
    			
    			
    			
    			Mt910 mt910=new Mt910();
    			com.ftn.schema.mt910.TBanka pover=new com.ftn.schema.mt910.TBanka();
    			pover.setBankAccountNumber("RACUN BANKE!");
    			pover.setSWIFT(swiftP);
    			pover.setId(UUID.randomUUID().toString().replaceAll("-", ""));
    			
    			mt910.setIdPorukeNaloga("MT103");
    			mt910.setDatumValute(nalog.getPodaciOPrenosu().getDatumValute());
    			mt910.setIznos(nalog.getPodaciOPrenosu().getIznos());
    			mt910.setSifraValute(nalog.getPodaciOPrenosu().getOznakaValute());
    			
    			mt910.setBankaPoverilac(pover);
    			
    			
    			System.out.println("Banka Skida pare sa racuna klijenta");
    	    	firmaDuznik.getRacun().setRezervisanaSredstva(new BigDecimal(firmaDuznik.getRacun().getRezervisanaSredstva().intValue()- nalog.getPodaciOPrenosu().getIznos().intValue()));
    	    	System.out.println("Firma Novo Stanje: "+firmaDuznik.getRacun().getTrenutnoStanje()+" Rezervisna Sredstva:  "+firmaDuznik.getRacun().getRezervisanaSredstva());

    			
    			
    	//		String str = new Requests().makeGetRequest("http://localhost:8082/getFirma/19");
    			
		/*			FrimaModel firma = null;
					try {
						firma = new ObjectMapper().readValue(str, FrimaModel.class);
					} catch (JsonParseException e) {
						// TODO Auto-generated catch block
						System.out.println("1!");
						e.printStackTrace();
					} catch (JsonMappingException e) {
						// TODO Auto-generated catch block
						System.out.println("1!");
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					System.out.println(firma.getNaziv());
				
    			*/
    			
    		}else{
    			System.out.println("Clearing & Settlement!");
    			
    			
    			
    			
    			
    		}
    		
    		
    		
    		
    	}
    	
    	
    	return false;
    }

    /* (non-Javadoc)
     * @see com.ftn.banka.Banka#clearSettleBanka(com.ftn.schema.mt102.Mt102  mt102 ,)com.ftn.schema.mt910.Mt910  mt910 )*
     */
    public void clearSettleBanka(com.ftn.schema.mt102.Mt102 mt102,com.ftn.schema.mt910.Mt910 mt910) { 
        LOG.info("Executing operation clearSettleBanka");
        System.out.println(mt102);
        System.out.println(mt910);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.ftn.banka.Banka#preuzimanjeIzvoda(com.ftn.schema.zahtev.ZahtevZaIzvod  zahtev )*
     */
    public com.ftn.schema.izvod.Izvod preuzimanjeIzvoda(com.ftn.schema.zahtev.ZahtevZaIzvod zahtev) { 
        LOG.info("Executing operation preuzimanjeIzvoda");
        System.out.println(zahtev);
        try {
            com.ftn.schema.izvod.Izvod _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
